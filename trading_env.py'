import pyupbit
import numpy as np
import gym  # OpenAI gym을 임포트
from gym.spaces import Discrete, Box

class TradingEnv(gym.Env):  # gym.Env를 상속받음
    def __init__(self, tickers):
        super(TradingEnv, self).__init__()
        self.tickers = tickers  # 종목 목록
        self.current_ticker = None
        self.reset()

        # Observation space 정의: 4개의 값 (close, volume, MA5, MA20)
        self.observation_space = Box(low=-np.inf, high=np.inf, shape=(4,), dtype=np.float32)

        # Action space 정의: 3가지 행동 (buy, hold, sell)
        self.action_space = Discrete(3)

    def reset(self):
        self.current_ticker = self.tickers[0]  # 초기 종목 설정
        return self.get_state(self.current_ticker)

    def get_state(self, ticker):
        # 데이터 가져오기
        try:
            df = pyupbit.get_ohlcv(ticker, interval="day", count=50)
        except Exception as e:
            print(f"Error fetching data for {ticker}: {e}")
            return np.zeros(4)  # 데이터를 가져오지 못하면 0 배열을 반환

        # 데이터가 None인 경우 처리
        if df is None:
            print(f"No data available for {ticker}")
            return np.zeros(4)  # 데이터를 가져오지 못하면 0 배열을 반환

        # 이동 평균 계산 (5일, 20일)
        df['MA5'] = df['close'].rolling(window=5).mean()  # 5일 이동 평균 계산
        df['MA20'] = df['close'].rolling(window=20).mean()  # 20일 이동 평균 계산

        # 이동 평균 계산 후, 마지막 1개 행을 가져옴
        # 이동 평균 계산이 안 되면 NaN이 생기므로, NaN 값이 있는지 확인
        if df['MA5'].isnull().any() or df['MA20'].isnull().any():
            print(f"Data for {ticker} contains NaN values in MA5 or MA20")

        # 상태로 사용할 데이터 반환
        state = np.array(df[['close', 'volume', 'MA5', 'MA20']].tail(1))  # 가장 최근 종목 데이터
        # NaN 값이 있는 경우 0으로 대체
        state = np.nan_to_num(state)  # NaN을 0으로 대체
        return state.flatten()  # 1D 배열로 변환

    def step(self, action):
        # 강화학습 에이전트가 선택한 행동에 따른 결과 처리
        reward = 0
        done = False
        if action == 0:  # buy
            # 매수 행동
            reward = 1  # 매수하면 보상 (예시)
        elif action == 1:  # hold
            reward = 0  # 보유 시 보상 없음
        elif action == 2:  # sell
            # 매도 행동
            reward = -1  # 매도하면 보상 (예시)

        # 상태 갱신
        self.current_ticker = self.tickers[(self.tickers.index(self.current_ticker) + 1) % len(self.tickers)]  # 다음 종목으로 이동
        return self.get_state(self.current_ticker), reward, done, {}

# 예시로 사용할 종목 목록
tickers = pyupbit.get_tickers(fiat="KRW")
env = TradingEnv(tickers)
